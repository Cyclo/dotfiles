set nocompatible
filetype off

set rtp+=~/.vim/vundle/
call vundle#begin()

Bundle 'gmarik/vundle'

" UI
Bundle 'bling/vim-airline'
"Bundle 'flazz/vim-colorschemes'
Bundle 'airblade/vim-gitgutter'
Bundle 'morhetz/gruvbox'

" File browsing
Bundle 'scrooloose/nerdtree'
Bundle 'ctrlpvim/ctrlp.vim'
"Bundle 'mileszs/ack.vim'
Bundle 'rking/ag.vim'

" Syntax
Bundle 'kchmck/vim-coffee-script'
Bundle 'jnwhiteh/vim-golang'
Bundle 'groenewege/vim-less'
Bundle 'othree/html5.vim'
Bundle 'puppetlabs/puppet-syntax-vim'
Bundle 'elzr/vim-json'
Bundle 'guns/vim-clojure-static'
Bundle 'mxw/vim-jsx'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'JulesWang/css.vim' 
Bundle 'cakebaker/scss-syntax.vim'

" Editing 
Bundle 'vim-scripts/Align'
Bundle 'tpope/vim-surround'
Bundle 'gregsexton/MatchTag'
Bundle 'davidhalter/jedi-vim'
Bundle 'Raimondi/delimitMate'
"Bundle 'Shutnik/jshint2.vim'
Bundle 'scrooloose/syntastic'
Bundle 'othree/javascript-libraries-syntax.vim'
Bundle 'ervandew/supertab'
Bundle 'editorconfig/editorconfig-vim'



" Snippets, refine this:

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'

Plugin 'honza/vim-snippets'



call vundle#end()

syntax enable
set t_Co=256
set background=light 
colorscheme gruvbox

filetype plugin indent on

set history=700           " Sets how many lines of history VIM has to remember
set autoread              " Set to auto read when a file is changed from the outside

let mapleader = ","
let g:mapleader = ","
nmap ; :

" Fast saving + switching
nmap <leader>w :w!<cr>
nmap <leader>q :q<cr>
nmap <leader>x :qa!<cr>
noremap <Leader><Leader> <C-^>  " Fast buffer switch
set timeoutlen=300 ttimeoutlen=50  " Fast mode switching

if has('gui')
    set guifont=Inconsolata-dz\ for\ Powerline:h13
    set go-=T                  " No toolbar
    set columns=180            " Larger window by default
    set lines=50
    set mousehide              " Hide cursor whilst typing
endif

if has('gui_macvim')
  set transparency=5
  " Press Ctrl-Tab to switch between open tabs (like browser tabs) to 
  " the right side. Ctrl-Shift-Tab goes the other way.
  noremap <C-Tab> :tabnext<CR>
  noremap <C-S-Tab> :tabprev<CR>

  " Switch to specific tab numbers with Command-number
  noremap <D-1> :tabn 1<CR>
  noremap <D-2> :tabn 2<CR>
  noremap <D-3> :tabn 3<CR>
  noremap <D-4> :tabn 4<CR>
  noremap <D-5> :tabn 5<CR>
  noremap <D-6> :tabn 6<CR>
  noremap <D-7> :tabn 7<CR>
  noremap <D-8> :tabn 8<CR>
  noremap <D-9> :tabn 9<CR>

  " Command-0 goes to the last tab
  noremap <D-0> :tablast<CR>
endif

set so=7                       " Set 7 lines to the cursor - when moving vertically using j/k
set wildmenu                   " Turn on the WiLd menu, better command completion
set wildignore=*.o,*~,*.pyc    " Ignore compiled files
set wildmode=longest,list,full
set ruler                      " Always show current position
set cmdheight=1                " Height of the command bar
set hid                        " A buffer becomes hidden when it is abandoned
set backspace=eol,start,indent " Configure backspace so it acts as it should act
set whichwrap+=<,>,h,l
set ignorecase                 " Ignore case when searching
set smartcase                  " When searching try to be smart about cases
set hlsearch                   " Highlight search results
set incsearch                  " Makes search act like search in modern browsers
set lazyredraw                 " Don't redraw while executing macros (good performance config)
set magic                      " For regular expressions turn magic on
set showmatch                  " Show matching brackets when text indicator is over them
set mat=2                      " How many tenths of a second to blink when matching brackets
set fillchars+=vert:\          " Window split styling
set cursorline
set scrolloff=5

autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline

set ffs=unix,dos,mac     " Use Unix as the standard file type


" Want utf8 at all times
set termencoding=utf-8
set encoding=utf-8
set fileencoding=utf-8

set nobackup " Turn backup off, since most stuff is in SVN, git et.c anyway...
set nowb
set noswapfile

if exists('+undofile')
  set undofile
  set undodir=~/.vim/.cache/undo
endif

set expandtab                                      " Use spaces instead of tabs
set smarttab                                       " Be smart when using tabs ;)
set shiftwidth=2                                   " Setup default ts
set tabstop=2                                      " Tabs are this many spaces
set softtabstop=2
set bs=2

set clipboard=unnamed                              " Use the system clipboard to do our stuff, proper integration
set lbr                                            " Linebreak on 500 characters
set tw=500
set ai                                             " Auto indent
set si                                             " Smart indent
set wrap                                           " Wrap lines
set mouse=nicr                                     " Remove ME
set mousehide
set number                                         " line numbers
set list
set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
set linebreak
let &showbreak='↪ '
set iskeyword-=_                                   " Word breaks around underscores

set scrolljump=3 "minimum number of lines to scroll
set ttyfast
set viewoptions=folds,options,cursor,unix,slash     "unix/windows compatibility


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Retain visual selection after identing
vnoremap < <gv
vnoremap > >gv

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Home row jump to start and end of line
noremap H ^
noremap L $

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Unmap arrow keys
"noremap <Left> :bprev <CR>
"noremap <Right> :bnext<CR>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
set laststatus=2 " Always show the status line

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
map 0 ^

autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" TODO: Revise paste options
" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Paste toggles
nnoremap <F7> :set invpaste paste?<Enter>
imap <F7> <C-O><F7>
set pastetoggle=<F7> " Hit f7 before pasting into terminal


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => File Browsing 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let NERDTreeIgnore=['\~$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.pyc$']
:nmap ,e :NERDTreeToggle<CR>

highlight Pmenu ctermbg=238 gui=bold

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
let g:ctrlp_working_path_mode = 'ra'  " search for nearest ancestor like .git, .hg, and the directory of the current file
let g:ctrlp_match_window_bottom = 1   " show the match window at the top of the screen
let g:ctrlp_max_height = 8      " maxiumum height of match window
let g:ctrlp_switch_buffer = 'et'    " jump to a file if it's open already
let g:ctrlp_use_caching = 1       " enable caching
let g:ctrlp_clear_cache_on_exit=0     " speed up by not removing clearing cache evertime
let g:ctrlp_show_hidden = 1       " show me dotfiles
let g:ctrlp_mruf_max = 250        " number of recently opened files


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Syntastic
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_check_on_open=1
let g:syntastic_javascript_checkers = ['jshint']

let g:syntastic_java_javac_config_file_enabled = 1
let g:syntastic_always_populate_loc_list=1

let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'

let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

"let statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
map <leader>x :Errors<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:bufferline_echo=0
let g:airline_powerline_fonts = 1 " Powerline symbols
let g:airline_theme='wombat'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => JS Library Syntax 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:used_javascript_libs = 'angularjs,jasmine,underscore'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => augroups 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

autocmd FileType go autocmd BufWritePre <buffer> Fmt

autocmd FileType scss set omnifunc=csscomplete#CompleteCSS



if has("autocmd")

  augroup coffee " {{{3
    autocmd BufRead,BufNewFile *.coffee 
        \ set ts=2 sw=2 et
  augroup END

  augroup python " {{{3
    autocmd BufRead,BufNewFile *.py 
        \ set ts=4 sw=4 et
    autocmd Filetype python let pyindent_open_paren = '&sw'
    autocmd Filetype python let pyindent_continue = '&sw'
    autocmd Filetype python let python_highlight_space_errors = 1 " Highlight trailing spaces and mixed tab and spaces
    autocmd Filetype python let python_space_error_highlight = 1 " Same thing for newer version of python syntax file
    autocmd Filetype python let python_highlight_numbers = 1
    autocmd Filetype python let python_highlight_builtins = 1
    autocmd Filetype python let python_highlight_exceptions = 1
    autocmd Filetype python let g:pydoc_cmd = "/usr/bin/pydoc" " pydoc
    autocmd Filetype python let g:pydiction_location = '~/.vim/after/ftplugin/complete-dict' " pydiction
    autocmd Filetype python set makeprg=pychecker
    autocmd Filetype python map <F5> :!python % <CR>
    autocmd Filetype python map <F7> :make % <CR>
    autocmd Filetype python match ErrorMsg '\%>80v.\+' " Match error any line with more than 80 chars
  augroup END
  augroup markdown " {{{3
    autocmd BufRead,BufNewFile *.mdoc
          \ set tabstop=2 shiftwidth=2 softtabstop=2
  augroup END

  augroup html " {{{3
    autocmd BufNewFile *.htm,*.html
          \ 0put ='<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">' |
          \ $put ='<html xml:lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\">' |
          \ $put ='  <head>' |
          \ $put ='    <title></title>' |
          \ $put ='    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />' |
          \ $put ='    <link href=\"\" rel=\"stylesheet\" type=\"text/css\" />' |
          \ $put ='    <style type=\"text/css\">' |
          \ $put ='    </style>' |
          \ $put ='  </head>' |
          \ $put ='  <body>' |
          \ $put ='  </body>' |
          \ $put ='</html>' |
          \ $put ='<!-- vim: set sw=2 sts=2 et tw=80 : -->' |
          \ set sw=2 sts=2 et tw=80 | norm G
  augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

